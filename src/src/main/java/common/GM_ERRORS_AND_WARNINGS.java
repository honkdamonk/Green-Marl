package common;

public enum GM_ERRORS_AND_WARNINGS
{
	GM_ERROR_UNKNOWN(0),
	GM_ERROR_UNDEFINED(1),
	GM_ERROR_UNDEFINED_FIELD(2),
	GM_ERROR_UNDEFINED_FIELD_GRAPH(3),
	//GM_ERROR_MULTIPLE_TARGET,
	GM_ERROR_PROPERTY_ARGUMENT(4),
	GM_ERROR_INVALID_OUTPUT_TYPE(5),
	GM_ERROR_NONGRAPH_TARGET(6),
	GM_ERROR_NONNODE_TARGET(7),
	GM_ERROR_NONSET_TARGET(8),
	GM_ERROR_DUPLICATE(9),
	GM_ERROR_NONGRAPH_FIELD(10),
	GM_ERROR_OPERATOR_MISMATCH(11),
	GM_ERROR_OPERATOR_MISMATCH2(12),
	GM_ERROR_COMPARE_MISMATCH(13),
	GM_ERROR_READONLY(14),
	GM_ERROR_TARGET_MISMATCH(15),
	GM_ERROR_TARGET_MISMATCH2(16), // expr
	GM_ERROR_ASSIGN_TYPE_MISMATCH(17),
	GM_ERROR_WRONG_PROPERTY(18),
	//GM_ERROR_INVALID_ITERATOR,
	GM_ERROR_NEED_NODE_ITERATION(19),
	GM_ERROR_NEED_BFS_ITERATION(20),
	GM_ERROR_NEED_BOOLEAN(21),
	GM_ERROR_NEED_NUMERIC(22),
	GM_ERROR_UNBOUND_REDUCE(23),
	GM_ERROR_NEED_ITERATOR(24),
	GM_ERROR_DOUBLE_BOUND_ITOR(25),
	GM_ERROR_DOUBLE_BOUND_OP(26),
	//GM_ERROR_WRITE_TO_BOUND_ID,
	//GM_ERROR_WRITE_TO_BOUND_FIELD,
	GM_ERROR_GRAPH_REDUCE(27),
	GM_ERROR_TYPE_CONVERSION(28),
	GM_ERROR_TYPE_CONVERSION_BOOL_NUM(29),
	GM_ERROR_REQUIRE_NUMERIC_REDUCE(30),
	GM_ERROR_REQUIRE_BOOLEAN_REDUCE(31),
	GM_ERROR_NEED_PRIMITIVE(32),
	GM_ERROR_TARGET_GRAPH_MISMATCH(33),
	GM_ERROR_GROUP_REDUCTION(34),
	GM_ERROR_PAR_RETURN(35),

	GM_ERROR_NEED_ORDER(36),
	GM_ERROR_NESTED_BFS(37),
	GM_ERROR_INVALID_GROUP_DRIVER(38),
	GM_ERROR_INVALID_ITERATOR_FOR_RARROW(39),

	GM_ERROR_DEFAULT_GRAPH_AMBIGUOUS(40),

	// Conflict erors
	GM_ERROR_READ_REDUCE_CONFLICT(41),
	GM_ERROR_WRITE_REDUCE_CONFLICT(42),
	GM_ERROR_WRITE_WRITE_CONFLICT(43),
	GM_ERROR_READ_WRITE_CONFLICT(44),
	GM_ERROR_READ_MUTATE_CONFLICT(45),
	GM_ERROR_WRITE_MUTATE_CONFLICT(46),
	GM_ERROR_MUTATE_MUTATE_CONFLICT(47),

	GM_ERROR_GROUP_MISMATCH(48), // error in group assignment
	GM_ERROR_INVALID_BUILTIN(49), // Invalid builtin
	GM_ERROR_INVALID_BUILTIN_ARG_COUNT(50), // Invalid builtin
	GM_ERROR_INVALID_BUILTIN_ARG_TYPE(51),

	GM_ERROR_INVALID_ARGMAX_COUNT(52), // Invalid argument in <;..> min= <;..>
	GM_ERROR_INCONSISTENT_ARGMAX(53), // LHS list should have all same driver

	GM_ERROR_RETURN_FOR_VOID(54),
	GM_ERROR_NO_VOID_RETURN(55),
	GM_ERROR_RETURN_MISMATCH(56),

	GM_ERROR_CPP_UNSUPPORTED_SYNTAX(57),

	// BACKED ERRORS
	GM_ERROR_FILEWRITE_ERROR(58),

	GM_ERROR_GPS_NUM_PROCS(59),
	GM_ERROR_GPS_PROC_NAME(60),
	GM_ERROR_GPS_UNSUPPORTED_OP(61),
	GM_ERROR_GPS_UNSUPPORTED_RANGE_MASTER(62),
	GM_ERROR_GPS_UNSUPPORTED_RANGE_VERTEX(63),
	GM_ERROR_GPS_NEED_PARALLEL(64),
	GM_ERROR_GPS_NBR_LOOP_INSIDE_WHILE(65),
	GM_ERROR_GPS_UNSUPPORTED_COLLECTION(66),
	GM_ERROR_GPS_MULTIPLE_GRAPH(67),
	GM_ERROR_GPS_NO_GRAPH(68),
	GM_ERROR_GPS_PULL_SYNTAX(69),
	GM_ERROR_GPS_RANDOM_NODE_WRITE(70),
	GM_ERROR_GPS_RANDOM_NODE_WRITE_DEF_SCOPE(71),
	GM_ERROR_GPS_RANDOM_NODE_WRITE_USE_SCOPE(72),
	GM_ERROR_GPS_RANDOM_NODE_WRITE_REDEF(73),
	GM_ERROR_GPS_RANDOM_NODE_WRITE_CONDITIONAL(74),
	GM_ERROR_GPS_RANDOM_NODE_READ(75),
	GM_ERROR_GPS_NBR_LOOP_TOO_DEEP(76),
	GM_ERROR_GPS_MULTIPLE_INNER_LOOP(77),

	GM_ERROR_GPS_EDGE_INIT(78),
	GM_ERROR_GPS_EDGE_READ_RANDOM(79),
	GM_ERROR_GPS_EDGE_WRITE_RANDOM(80),
	GM_ERROR_GPS_EDGE_WRITE_CONDITIONAL(81),
	GM_ERROR_GPS_EDGE_WRITE_RHS(82),
	GM_ERROR_GPS_EDGE_SEND_VERSIONS(83),

	GM_ERROR_END(84);
// END_MARKER

	private int intValue;
	private static java.util.HashMap<Integer, GM_ERRORS_AND_WARNINGS> mappings;
	private static java.util.HashMap<Integer, GM_ERRORS_AND_WARNINGS> getMappings()
	{
		if (mappings == null)
		{
			synchronized (GM_ERRORS_AND_WARNINGS.class)
			{
				if (mappings == null)
				{
					mappings = new java.util.HashMap<Integer, GM_ERRORS_AND_WARNINGS>();
				}
			}
		}
		return mappings;
	}

	private GM_ERRORS_AND_WARNINGS(int value)
	{
		intValue = value;
		GM_ERRORS_AND_WARNINGS.getMappings().put(value, this);
	}

	public int getValue()
	{
		return intValue;
	}

	public static GM_ERRORS_AND_WARNINGS forValue(int value)
	{
		return getMappings().get(value);
	}
}